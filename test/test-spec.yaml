openapi: "3.0.0"
info:
  version: 1.0.0
  title: Test
servers:
  - url: http://localhost:8000

paths:
  # Simplest possible route (?)
  /status:
    get:
      operationId: get_status
      responses:
        '200':
          description: "Ok"

    post:
      summary: Set The Status
      description: I guess we are setting some kind of status
      operationId: set_status
      requestBody:
        description: set status body
        required: false
        content:
          application/json:
            schema:
              nullable: true
              type: string
      responses:
        '200':
          description: "Things are OK"
          content:
            application/json:
              schema:
                nullable: true
                type: string

  /twoPathParams/{my_name}/{myAge}:
    get:
      summary: echo name and age
      operationId: two_path_params
      parameters:
        - name: my_name
          in: path
          required: true
          description: User name
          schema:
            type: string
        - name: myAge
          in: path
          required: true
          description: User age
          schema:
            type: integer
      responses:
        '200':
          description: Hello 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Hello"

  /twoQueryParams:
    # path-level parameter
    parameters:
      - name: myName
        in: query
        required: true
        description: User name
        schema:
          type: string
      - name: my_age
        in: query
        description: User age
        schema:
          type: boolean
    get:
      summary: echo name and age
      operationId: two_query_params
      parameters:
        # override parameter at operation-level
        - name: my_age
          in: query
          required: false
          description: User age
          schema:
            type: integer
      responses:
        '200':
          description: Hello
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Hello"

  /justDefault:
    get:
      operationId: just_default
      responses:
        default:
          description: "Default"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Hello"

  /okErrorDefault:
    get:
      parameters:
        - name: return_code
          in: query
          required: true
          description: expected status code
          schema:
            type: integer
      operationId: ok_error_default
      responses:
        '200':
          description: "Ok"
        '400':
          description: "Not Ok"
        default:
          description: "Default"

  /nestedResponseType:
    get:
      operationId: nestedResponse
      responses:
        '200':
          title: OkNestedResponse
          description: "Ok"
          content:
            application/json:
              schema:
                type: object
                required:
                  - first
                properties:
                  first:
                    title: FirstResponse
                    type: object
                    required:
                      - second
                    properties:
                      second:
                        type: object

  /anythingGoes:
    post:
      operationId: anything_goes
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OneOfTest'
      responses:
        '200':
          description: "Ok"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OneOfTest'

components:
  schemas:
    # just a boring, normal, not interesting struct
    Hello:
      description: Hello description
      required:
        - myName
        - my_age
      properties:
        myName:
          nullable: false
          type: string
        my_age:
          nullable: true
          type: integer

    # test various combinations of nullable and required
    NullableStruct:
      # struct itself is nullable
      description: This is how we represent a struct that is nullable
      nullable: true
      required:
        - this
        - flooglezingle
      properties:
        # not nullable, required
        this:
          type: string
        # not nullable, not required
        that:
          nullable: false
          type: integer
        other:
        # nullable, not required
          nullable: true
          type: array
          items:
            type: string
        # nullable, required
        flooglezingle:
          nullable: true
          type: boolean

    Anything:
      type: any

    AllOfTest:
      description: Test the AllOf struct generation
      allOf:
        - $ref: '#/components/schemas/Hello'
        - type: object
          required:
            - height
          properties:
            height:
              type: number
            favourite_colour:
              type: string
            feet_info:
              title: FeetInfo
              required:
                - number_of_toes
                - webbed
              properties:
                number_of_toes:
                  type: integer
                eats_toenails:
                  type: boolean
                webbed:
                  type: boolean
                the_rest:
                  $ref: '#/components/schemas/Anything'

    OneOfTest:
      description: Test the OneOf enum generation
      oneOf:
        - $ref: '#/components/schemas/Hello'
        - $ref: '#/components/schemas/NullableStruct'
        - $ref: '#/components/schemas/AllOfTest'
        - type: array
          items:
            required:
              - x
            properties:
              x:
                type: number
              y:
                type: string


    StringEnum:
      type:
        string
      enum:
        - "foo"
        - "bar"
        - "baz-quxx"

    # HasAdditionalProps:
    #   additionalProperties:
    #     true

    # HasADefault:
    #   type: integer
    #   default: 10
